   - need to figure out how to pass module names around to different generation scripts
   - maybe I should disable module suffixes for now....

   - I need to look into the repositories Vincent is working on. My code should mesh nicely
     with his. I should write some test harnesses that use his python modules to generate
     some bitstreams. Then I can actually determine how well my circuits are performing.
   - I should actually start integrating Vincent's code into my own code.
      - I can definitely use his sc_dot_product function

   - Select Streams: 
      For now, there is no vander corpit circuit. For LFSR, we can 'mod' a sufficiently
      large LFSR to obtain a 'random' binary number for select streams. Counters are
      trivial.
 
   - make a matrix multiply wrapper
     There can be two kinds of wrappers. One wrapper can take a hard-coded
     set of weights and hard-wire those weights into the module? Maybe talk more
     about this at the next meeting. I am confused how we can use hard-wired weights
     when we will need to be changing the weights during training.

   - think about how the matrix multiply wrapper is going to work.
      I can understand the binary->stochastic portion (weight and input stream generation)
      How to I make the back-end, meaning, how do I make stochastic->binary conversion.
      I was told by vincent that its Ok at this point to simply count up the values
      when doing stochastic to digital conversion...I should talk more to this point
      at the next meeting.

   - OK. We will have 3? possible types of noise source choices. We have weights, input_features,
     and the select streams. I guess we will have choices for each available through arguments
     to the script.

   - Does SNG.v need restart and enable signals?

   - verify alahgi adder testbench. 
   - make an alaghi adder tree that adds n inputs, where n is any natural number.
   - add support for alahgi adder

   - Is it best to have arguments be the means of specifying the modules.
     Maybe a config file is better?

   - I need to really think about my 'API' Im building.
     What kind of stuff do I really want my code to do?
         First off, I want a matrix multiply module to be generated which is
         ready to run on an FPGA.

         Secondly, I want users to be able to generate stochastic modules and
         stochastic buidling blocks easily by using my python 'library'.

         Thirdly, I want to be able to run my modules in simulation using Vincent's
         py-sc repository. I can use rng stochastic sequences and run them through
         my modules and determine the performance and accuracy of my stochastic modules.
         
